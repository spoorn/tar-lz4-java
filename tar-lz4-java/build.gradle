plugins {
    id 'java-library'
    id 'maven-publish'
    // Shadow jar so consumers can pick up transitive dependencies without conflicts
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id "io.freefair.lombok" version "6.5.0.3"
}

version = project.version
group = project.maven_group

repositories {
    mavenCentral()
}

dependencies {

    //include("org.lz4:lz4-java:${project.lz4_version}")
    implementation("org.lz4:lz4-java:${project.lz4_version}")

    //include("org.apache.commons:commons-compress:${project.commons_compress_version}")
    implementation("org.apache.commons:commons-compress:${project.commons_compress_version}")
    implementation("commons-io:commons-io:${project.commons_io_version}")

    implementation 'org.apache.logging.log4j:log4j-api:2.18.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.18.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

tasks.named('jar') {
    // Set Multi-Release to 'true' for https://github.com/johnrengelman/shadow/issues/449
    // and https://stackoverflow.com/questions/52953483/logmanager-getlogger-is-unable-to-determine-class-name-on-java-11
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Multi-Release': 'true')
    }
}

jar {
    archiveClassifier = 'min'
}

// Make build run shadowJar
tasks.build.dependsOn tasks.shadowJar

shadowJar {
    relocate 'org.apache.commons', 'org.spoorn.org.apache.commons'
    relocate 'net.jpountz', 'org.spoorn.net.jpountz'
    relocate 'org.apache.logging.log4j', 'org.spoorn.org.apache.logging.log4j'
    minimize {
        exclude(dependency('org.lz4:.*:.*'))
    }
    archiveClassifier = null
}

artifacts {
    archives shadowJar
}

java {
    withSourcesJar()
}

//def targetJavaVersion = 17
//tasks.withType(JavaCompile).configureEach {
//    // ensure that the encoding is set to UTF-8, no matter what the system default is
//    // this fixes some edge cases with special characters not displaying correctly
//    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
//    // If Javadoc is generated, this must be specified in that task too.
//    it.options.encoding = "UTF-8"
//    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
//        it.options.release = targetJavaVersion
//    }
//}

//java {
////    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
////    if (JavaVersion.current() < javaVersion) {
////        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
////    }
////    archivesBaseName = project.archives_base_name
////    // If you remove this line, sources will not be generated.
////    withSourcesJar()
//    modularity.inferModulePath.set(true)
//}

test {
    useJUnitPlatform()
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId project.group
            artifactId project.name
            version project.version
            from components.java
        }
    }
}